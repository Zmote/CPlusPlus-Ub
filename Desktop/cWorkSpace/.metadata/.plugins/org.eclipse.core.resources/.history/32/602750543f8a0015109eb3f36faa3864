#include "word.h"
#include "cute.h"
#include "ide_listener.h"
#include "xml_listener.h"
#include "cute_runner.h"

void testSimpleWordPerConstructor(){
Word myword{"Zafer"};
std::ostringstream o{};
o << myword;
ASSERT_EQUAL("Zafer", o.str());
}

void testInvalidWordPerConstructor1(){
ASSERT_THROWS(Word myword{"Zafer2"},std::invalid_argument);
}
void testInvalidWordPerConstructor2(){
ASSERT_THROWS(Word myword{"?!Cucumber"},std::invalid_argument);
}
void testInvalidWordPerConstructor3(){
ASSERT_THROWS(Word myword{" Zafer"},std::invalid_argument);
}
void testMultipleWordsConstructor(){
ASSERT_THROWS(Word myword{"Zafer is da man"},std::invalid_argument);
}
void testEmptyWordConstructor(){
ASSERT_THROWS(Word myword{""},std::invalid_argument);
}
void testDefaultWordConstructor(){
Word myword{};
std::ostringstream o{};
o << myword;
ASSERT_EQUAL("",o.str());
}
void testSimpleWordPerStream(){

}
void testInvalidWordPerStream1(){

}
void testInvalidWordPerStream2(){

}
void testInvalidWordPerStream3(){

}

void testMultipleWordsStream(){

}

void testEmptyWordStream(){

}

void testWordEndOfInputStream(){

}



void runAllTests(int argc, char const *argv[]){
	cute::suite s;
	s.push_back(CUTE(testSimpleWordPerConstructor));
	s.push_back(CUTE(testInvalidWordPerConstructor1));
	s.push_back(CUTE(testInvalidWordPerConstructor2));
	s.push_back(CUTE(testInvalidWordPerConstructor3));
	s.push_back(CUTE(testMultipleWordsConstructor));
	s.push_back(CUTE(testEmptyWordConstructor));
	s.push_back(CUTE(testDefaultWordConstructor));
	cute::xml_file_opener xmlfile(argc,argv);
	cute::xml_listener<cute::ide_listener<> >  lis(xmlfile.out);
	cute::makeRunner(lis,argc,argv)(s, "AllTests");
}

int main(int argc, char const *argv[]){
    runAllTests(argc,argv);
    return 0;
}



