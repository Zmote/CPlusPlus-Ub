#include "not_on_heap.h"
#include "cute.h"
#include "ide_listener.h"
#include "xml_listener.h"
#include "cute_runner.h"
#include <vector>


void test_local_instance_creation_of_not_on_heap(){
	noh_extended noh{};
	ASSERT_EQUAL(10,noh.x);
}

void test_on_heap_creation_with_new_not_possible(){
	ASSERT_THROWS(new noh_extended{},std::bad_alloc);
}

void test_on_heap_array_creation_with_new_not_possible(){
	ASSERT_THROWS(new noh_extended[5]{},std::bad_alloc);
}

void test_vector_with_not_on_heap_stil_works(){

}

void test_attempt_class_with_std_make_unique(){

}

void test_new_not_on_heap_as_parameter_for_std_unique_ptr(){

}

void test_std_make_shared_to_allocate_not_on_heap_on_heap(){

}

void test_create_new_object_and_then_rassign_cheat(){

}

void runAllTests(int argc, char const *argv[]){
	cute::suite s;
	s.push_back(CUTE(test_local_instance_creation_of_not_on_heap));
	s.push_back(CUTE(test_on_heap_creation_with_new_not_possible));
	s.push_back(CUTE(test_on_heap_array_creation_with_new_not_possible));
	cute::xml_file_opener xmlfile(argc,argv);
	cute::xml_listener<cute::ide_listener<> >  lis(xmlfile.out);
	cute::makeRunner(lis,argc,argv)(s, "AllTests");
}

int main(int argc, char const *argv[]){
    runAllTests(argc,argv);
    return 0;
}



